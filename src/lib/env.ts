
import { z } from 'zod'

// Schema de valida√ß√£o para vari√°veis de ambiente
const envSchema = z.object({
  // Vari√°veis obrigat√≥rias para funcionamento b√°sico - usando valores padr√£o do Supabase
  VITE_SUPABASE_URL: z.string().url('URL do Supabase deve ser v√°lida').default('https://csvkgokkbbtojjkitodc.supabase.co'),
  VITE_SUPABASE_ANON_KEY: z.string().min(1, 'Chave an√¥nima do Supabase √© obrigat√≥ria').default('eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImNzdmtnb2trdmJ0b2pqa2l0b2RjIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDk1OTE2NTIsImV4cCI6MjA2NTE2NzY1Mn0._pfTwbR3iLhqfJ--Tf6J8RD0lNQ8w8K9kzer8tY3ZDw'),
  
  // Vari√°veis opcionais com fallbacks seguros
  VITE_SENTRY_DSN: z.string().url().optional(),
  VITE_APP_VERSION: z.string().optional().default('1.0.0'),
  VITE_STRIPE_PUBLISHABLE_KEY: z.string().optional(),
  
  // Vari√°veis de desenvolvimento
  MODE: z.enum(['development', 'production', 'test']).optional().default('development'),
})

// Tipo TypeScript baseado no schema
export type EnvConfig = z.infer<typeof envSchema>

// Fun√ß√£o para validar e obter configura√ß√µes do ambiente
export function validateEnv(): EnvConfig {
  try {
    // Preparar objeto de ambiente com valores padr√£o se necess√°rio
    const envData = {
      VITE_SUPABASE_URL: import.meta.env.VITE_SUPABASE_URL || 'https://csvkgokkbbtojjkitodc.supabase.co',
      VITE_SUPABASE_ANON_KEY: import.meta.env.VITE_SUPABASE_ANON_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImNzdmtnb2trdmJ0b2pqa2l0b2RjIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDk1OTE2NTIsImV4cCI6MjA2NTE2NzY1Mn0._pfTwbR3iLhqfJ--Tf6J8RD0lNQ8w8K9kzer8tY3ZDw',
      VITE_SENTRY_DSN: import.meta.env.VITE_SENTRY_DSN,
      VITE_APP_VERSION: import.meta.env.VITE_APP_VERSION,
      VITE_STRIPE_PUBLISHABLE_KEY: import.meta.env.VITE_STRIPE_PUBLISHABLE_KEY,
      MODE: import.meta.env.MODE || 'development',
    }
    
    return envSchema.parse(envData)
  } catch (error) {
    if (error instanceof z.ZodError) {
      const missingVars = error.issues.map(issue => 
        `${issue.path.join('.')}: ${issue.message}`
      ).join('\n')
      
      console.error('‚ùå Erro de configura√ß√£o do ambiente:')
      console.error(missingVars)
      console.error('\nüìã Verifique se todas as vari√°veis necess√°rias est√£o configuradas.')
      
      throw new Error(`Vari√°veis de ambiente inv√°lidas ou ausentes:\n${missingVars}`)
    }
    throw error
  }
}

// Configura√ß√£o validada e tipada
export const env = validateEnv()

// Utilit√°rios para verifica√ß√£o de funcionalidades
export const features = {
  sentry: !!env.VITE_SENTRY_DSN,
  stripe: !!env.VITE_STRIPE_PUBLISHABLE_KEY,
  isProduction: env.MODE === 'production',
  isDevelopment: env.MODE === 'development',
} as const

// Log de status das configura√ß√µes (apenas em desenvolvimento)
if (env.MODE === 'development') {
  console.log('üîß Status das configura√ß√µes:')
  console.log(`- Supabase: ‚úÖ Conectado`)
  console.log(`- Sentry: ${features.sentry ? '‚úÖ Ativo' : '‚ö†Ô∏è Desabilitado'}`)
  console.log(`- Stripe: ${features.stripe ? '‚úÖ Ativo' : '‚ö†Ô∏è Desabilitado'}`)
  console.log(`- Ambiente: ${env.MODE}`)
}
